name: template_update

on:
  # Reusable workflow trigger
  workflow_call:
    inputs:
      template_repo:
        required: true
        type: string

jobs:
  update-template:
    runs-on: ubuntu-latest

    steps:
      # üì• 1. Checkout the project that *uses* the template
      - name: Checkout project repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # üßæ 2. Ensure .cookiecutter.json exists (answers file)
      - name: Verify .cookiecutter.json exists
        run: |
          if [ ! -f .cookiecutter.json ]; then
            echo "‚ùå Missing .cookiecutter.json in project root."
            exit 1
          fi

      # üåø 3. Pick develop > main as PR base
      - name: Determine base branch (develop > main)
        id: branch
        run: |
          if git ls-remote --heads origin develop | grep develop; then
            echo "BASE_BRANCH=develop" >> "$GITHUB_ENV"
          else
            echo "BASE_BRANCH=main" >> "$GITHUB_ENV"
          fi

      # üêç 4. Install Python & Cookiecutter
      - name: Set up Python & install Cookiecutter
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install cookiecutter

      # üß± 5. Install .NET 9 SDK (for test run)
      - name: Set up .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # üì¶ 6. Clone the template repo
      - name: Clone cookiecutter template repo
        run: git clone "${{ inputs.template_repo }}" template-source

      # üß† 7. Pick sub-template & regenerate project
      - name: Determine sub-template and generate project
        id: generate
        run: |
          TEMPLATE_PATH=""

          if grep -q '"include_aspire": *"yes"' .cookiecutter.json; then
            TEMPLATE_PATH="aspire-project"
          elif grep -q '"include_docker": *"yes"' .cookiecutter.json; then
            TEMPLATE_PATH="docker-project"
          else
            echo "‚ùå No valid sub-template selected."
            exit 1
          fi

          echo "Using sub-template: $TEMPLATE_PATH"

          # Tell hooks they‚Äôre in CI / non-interactive mode
          export COOKIECUTTER_NO_INPUT=1

          # Replay answers (can't combine with --no-input)
          cookiecutter "template-source/$TEMPLATE_PATH" \
            --replay-file .cookiecutter.json \
            --output-dir regenerated

          mkdir -p generated-project
          mv regenerated/* generated-project

      # üÜö 8. Diff regenerated vs. current repo
      - name: Compare generated project with current repo
        id: check_diff
        run: |
          diff_output=$(diff -qr generated-project . \
              --exclude=.git \
              --exclude=generated-project \
              --exclude=template-source \
              --exclude=.cookiecutter.json || true)
          echo "$diff_output"
          echo "DIFF_FOUND=$(test -n "$diff_output" && echo true || echo false)" >> "$GITHUB_ENV"

      # ‚ùå 9. Bail early if nothing changed
      - name: Stop if no changes detected
        if: env.DIFF_FOUND == 'false'
        run: exit 0

      # 10. Commit regenerated code on a new branch
      - name: Create and push update branch
        run: |
          # ‚îÄ‚îÄ clean up helper folders so the tree is truly clean ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          rm -rf template-source generated-project
      
          BRANCH="template-update-$(date +%s)"
          echo "UPDATE_BRANCH=$BRANCH" >> "$GITHUB_ENV"
      
          git checkout -b "$BRANCH"
      
          # Copy regenerated files, but skip helper dirs just in case
          rsync -av --delete regenerated-project/ . \
            --exclude='.git' \
            --exclude='template-source' \
            --exclude='generated-project'
      
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add -A
          git commit -m "chore: update from cookiecutter template"
          git push origin "$BRANCH"

      # üß™ 11. Run tests & collect results
      - name: Run tests
        continue-on-error: true           # keep workflow alive on test failure
        run: |
          mkdir -p test-results
          dotnet restore
          dotnet test \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory "$(pwd)/test-results"

      # üì§ 12. Upload test results artifact (only if .trx exists)
      - name: Upload test results
        if: ${{ always() && hashFiles('test-results/*.trx') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.trx

      # üõ†Ô∏è 13. Open pull request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update from Cookiecutter Template"
          body: |
            This PR includes updates generated from the template:

            ‚Ä¢ Source : `${{ inputs.template_repo }}`
            ‚Ä¢ Base   : `${{ env.BASE_BRANCH }}`  
            ‚Ä¢ CI     : test results attached as **test-results** artifact

            _Review carefully and merge when ready._
          branch: ${{ env.UPDATE_BRANCH }}
          base: ${{ env.BASE_BRANCH }}
