name: NBGV Prepare Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Branch to release from (e.g., main, develop, hotfix/xyz, v1.2)'
        type: string
        required: true
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Verify target branch via API
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          BR="${{ inputs.target_branch }}"
          URL="https://api.github.com/repos/${{ github.repository }}/branches/${BR}"
          code=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" "$URL")
          [[ "$code" == "200" ]] || { echo "❌ Branch not found on origin: $BR"; exit 1; }

      - name: Checkout target branch (full history for NBGV)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.target_branch }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Nerdbank.GitVersioning (install + outputs)
        id: nbgv
        uses: dotnet/nbgv@v0.4.2
        with:
          toolVersion: 3.8.38-alpha

      # Guard rails (policy)
      - name: Guard - block prerelease from main; block stable from develop/hotfix/*
        run: |
          PRE="${{ steps.nbgv.outputs.PrereleaseVersion }}"
          BR="${{ inputs.target_branch }}"
          if [[ -n "$PRE" && "$BR" == "main" ]]; then
            echo "❌ Computed PRERELEASE on 'main'. Cut prereleases from develop or hotfix/*."
            exit 1
          fi
          if [[ -z "$PRE" && ( "$BR" == "develop" || "$BR" =~ ^hotfix/ ) ]]; then
            echo "❌ Computed STABLE on '$BR'. Stable releases should come from main or vX.Y."
            exit 1
          fi

      - name: Compute tag/prerelease flags
        id: vars
        run: |
          PRE="${{ steps.nbgv.outputs.PrereleaseVersion }}"
          TAG="v${{ steps.nbgv.outputs.NuGetPackageVersion }}"
          echo "pre=$PRE"  >> $GITHUB_OUTPUT
          echo "tag=$TAG"  >> $GITHUB_OUTPUT
          echo "Using TAG=$TAG PRE='${PRE}'"

      - name: Build release notes from CHANGELOG.md (if available)
        id: notes
        run: |
          set -euo pipefail
          TAG="${{ steps.vars.outputs.tag }}"      # e.g., v1.2.3
          VER="${TAG#v}"                           # 1.2.3
          FILE="CHANGELOG.md"
          OUT="RELEASE_NOTES.md"

          if [[ -f "$FILE" ]]; then
            # Extract the section that starts with "## [v]X.Y.Z" (with or without brackets),
            # and stops at the next "## " header.
            awk -v ver="$VER" '
              BEGIN { found=0 }
              $0 ~ "^##[[:space:]]*\\[?v?" ver "\\]?([[:space:]]|$)" { found=1; print; next }
              found && /^##[[:space:]]/ { exit }
              found { print }
            ' "$FILE" > "$OUT" || true
          fi

          # If no section found, build a simple log since last tag
          if [[ ! -s "$OUT" ]]; then
            echo "## ${TAG}" > "$OUT"
            prev="$(git tag --sort=-creatordate | grep -v "^${TAG}$" | head -n1 || true)"
            if [[ -n "$prev" ]]; then
              echo "" >> "$OUT"
              echo "_Changes since ${prev}_" >> "$OUT"
              echo "" >> "$OUT"
              git log --no-merges --pretty=format:"- %s (%h) by %an" "${prev}..HEAD" >> "$OUT" || true
              echo "" >> "$OUT"
              echo "[Compare ${prev}…${TAG}](https://github.com/${{ github.repository }}/compare/${prev}...${TAG})" >> "$OUT"
            else
              echo "" >> "$OUT"
              git log --no-merges --pretty=format:"- %s (%h) by %an" >> "$OUT" || true
            fi
          fi

          # Expose a flag so we know to use --notes-file
          if [[ -s "$OUT" ]]; then
            echo "notes_file=$OUT" >> "$GITHUB_OUTPUT"
          else
            echo "notes_file=" >> "$GITHUB_OUTPUT"
          fi

      - name: Tag current commit with NBGV
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          nbgv tag || echo "Tag may already exist locally."
          git push origin "${{ steps.vars.outputs.tag }}" || echo "Tag already exists on remote."

      - name: Create GitHub Release (with CHANGELOG)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          TAG="${{ steps.vars.outputs.tag }}"
          PRE="${{ steps.vars.outputs.pre }}"
          BR="${{ inputs.target_branch }}"
          NOTES="${{ steps.notes.outputs.notes_file }}"

          FLAGS=()
          [[ -n "$PRE" ]] && FLAGS+=(--prerelease)
          if [[ -z "$PRE" && ( "$BR" == "main" || "$BR" =~ ^v[0-9]+\.[0-9]+$ ) ]]; then
            FLAGS+=(--latest)
          fi

          echo "Creating release ${TAG} from '${BR}'"
          if [[ -n "$NOTES" ]]; then
            gh release create "${TAG}" --title "${TAG}" --notes-file "$NOTES" "${FLAGS[@]}"
          else
            gh release create "${TAG}" --title "${TAG}" --generate-notes "${FLAGS[@]}"
          fi

