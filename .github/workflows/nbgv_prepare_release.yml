name: NBGV Prepare Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: "Branch or tag to release from"
        type: string
        default: main
        required: true

      increment:                     # major | minor | patch (patch → revision later)
        description: "Version increment"
        type: string
        default: patch
        required: true

      version_file_path:             # path relative to repo root
        description: "Path to version.json"
        type: string
        default: version.json
        required: false

    secrets:
      GH_TOKEN:
        description: "GitHub token (falls back to github.token)"
        required: false

    outputs:                   
      tag_name:
        description: "Git tag from Nerdbank"
        value:  ${{ jobs.prep.outputs.tag }}
      semver2:
        description: "SemVer2 string"
        value:  ${{ jobs.prep.outputs.semver }}

jobs:
  prep:
    runs-on: ubuntu-latest

    outputs:
      release_branch: ${{ steps.prep_release.outputs.branch }}
      tag:            ${{ steps.version.outputs.tag }}
      semver:         ${{ steps.version.outputs.semver }}

    steps:
      # 1️⃣  Checkout the target branch / tag
      - name: 📥 Checkout target
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || github.token }}

      # 2️⃣  Install .NET SDK (for the nbgv tool)
      - name: ⚙️ Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # 3️⃣  Ensure version.json exists at the given path
      - name: 🔍 Ensure version.json exists
        run: test -f "${{ inputs.version_file_path }}"

      # 4️⃣  Map "patch" -> "revision" (CLI nomenclature)
      #- name: 🔄 Map patch → revision
      #  id: map
      #  run: |
      #    INC="${{ inputs.increment }}"
       #   [ "$INC" = "patch" ] && INC=revision
       #   echo "inc=$INC" >> "$GITHUB_OUTPUT"

      # 4️⃣  (Optional) You can remove the Map step entirely—
      #     just use inputs.increment directly.

      # 5️⃣  Install NBGV CLI once
      - name: 🔧 Install NBGV CLI
        run: dotnet tool install -g nbgv --version 3.8.38-alpha

      # 6️⃣  Bump version and create the release branch
      - name: 🛠️  Prepare release branch
        id: prep_release
        run: |
          # Determine prerelease tag only for non-main branches
          TAG_ARG=""
          if [[ "${{ inputs.target_branch }}" != "main" && "${{ inputs.target_branch }}" != "master" ]]; then
            TAG_ARG="dev"   # or whatever prerelease you want
          fi

          # Use the raw increment input (major|minor|patch)
          nbgv prepare-release $TAG_ARG \
               --versionIncrement ${{ inputs.increment }} \
               -p .

          # expose the branch name for downstream jobs
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> "$GITHUB_OUTPUT"


      # 7️⃣  Resolve the exact tag & SemVer2
      - name: 🔖 Resolve tag & SemVer
        id: version
        run: |
          echo "tag=$(nbgv get-version -v GitTagName)"  >> "$GITHUB_OUTPUT"
          echo "semver=$(nbgv get-version -v SemVer2)"  >> "$GITHUB_OUTPUT"

      # 8️⃣  Create & push a bootstrap tag the very first time
      - name: 🏷️  Bootstrap first tag when repo is tag-less
        run: |
          if ! git tag --list | grep -q . ; then
            echo "No tags found – creating bootstrap tag 0.0.0 on the root commit"
            ROOT=$(git rev-list --max-parents=0 HEAD)
            git tag 0.0.0 "$ROOT"
            git push origin 0.0.0
          fi

      # 9️⃣  Generate release notes (normal tag-diff mode)
      - name: 📝 Generate release notes
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || github.token }}

      # 🔒 Always create & upload the notes so the Pack job can grab them  
      - name: 💾 Save notes to file
        if: always()
        run: |
          CONTENT="${{ steps.changelog.outputs.changelog || '# Initial release' }}"
          echo "$CONTENT" > release-notes.md
          ls -l release-notes.md

      - name: 📦 Upload release notes artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release_notes
          path: release-notes.md
