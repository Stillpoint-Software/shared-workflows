name: Old Publish

on:
  workflow_call:
    inputs:
      build_configuration:
        description: 'Build configuration'
        required: false
        type: string
        default: 'Release'
    secrets:
      NUGET_API_KEY:
        required: false

env:
  BRANCH_NAME: ${{ github.event.release.target_commitish }}
  SOLUTION_NAME: ${{ vars.SOLUTION_NAME }}
  DOTNET_VERSION: '9.0.x'
  NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'
  BUILD_CONFIGURATION: ''

jobs:
  build-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Release Configuration
      if: ${{ env.BRANCH_NAME == 'main' && (github.event.release.prerelease == false || github.event_name == 'workflow_dispatch') }}
      run: |
          echo "BUILD_CONFIGURATION=Release" >> $GITHUB_ENV
    
    - name: Debug Configuration
      if: ${{ github.event.release.prerelease }}
      run: |
          echo "BUILD_CONFIGURATION=Debug" >> $GITHUB_ENV

    - name: Check Build Configuration
      if: ${{ env.BUILD_CONFIGURATION == '' }}
      run: |
        echo "Invalid Build Configuration"
        exit 1

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Ensure Nerdbank.GitVersioning tool is installed
      run: |
        if ! dotnet tool list -g | grep -q nbgv; then
          dotnet tool install --global nbgv
        else
          dotnet tool update --global nbgv
        fi

    - name: Get version from Nerdbank.GitVersioning
      id: nbgv
      run: |
        nbgv get-version --format json > nbgv.json
        version=$(jq -r .NuGetPackageVersion nbgv.json)
        echo "version_tag=$version" >> $GITHUB_ENV

    - name: Get version from version.json
      id: get_version
      run: |
        version=$(jq -r .version version.json)
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_NAME }}

    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_NAME }}

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_NAME }}

    - name: Pack and Push
      run: dotnet pack --no-build --configuration ${{ env.BUILD_CONFIGURATION }} -p:PackageOutputPath=../../output --version-suffix "${{ env.VERSION_SUFFIX }}" -p:PackageSource='${{ env.NUGET_SOURCE }}' -p:PushAfterPack=true -p:PackageApiKey='${{ secrets.NUGET_API_KEY }}'
