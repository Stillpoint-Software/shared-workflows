name: NBGV Pack & Publish Package

on:
  workflow_call:
    inputs:
      checkout_ref:
        description: "Branch/ref to check out and pack"
        type: string
        required: true
      build_configuration:
        description: "Build configuration (e.g. Release, Develop)"
        type: string
        required: true
      push_after_pack:
        description: "Whether to push the resulting .nupkg"
        type: boolean
        required: true
      force_dev_prerelease:
        description: "Whether to include dev prerelease symbols"
        type: boolean
        required: true
      tag_name:
        description: "Exact Git tag produced by Nerdbank"
        type: string
        required: true
      semver2:
        description: "SemVer2 version string"
        type: string
        required: true
      prune_after_push:             
        description: "Delete old package versions after a successful push"
        type: boolean
        default: true
        required: false
      prune_keep:                   
        description: "Versions to retain per package"
        type: number
        default: 5
        required: false
        
    secrets:
      NUGET_API_KEY:
        description: "API key for pushing to NuGet.org"
        required: true
      GH_TOKEN:
        description: "GitHub token (falls back to github.token)"
        required: false
jobs:
  pack:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_ref }}
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
          
      - name: ‚¨áÔ∏è Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release_notes

      - name: üîÑ Restore
        run: dotnet restore

      - name: üèóÔ∏è Build
        run: dotnet build -c ${{ inputs.build_configuration }} --no-restore

      - name: üì¶ Pack
        run: |
          if [[ "${{ inputs.semver2 }}" == *-* ]]; then
            dotnet pack ‚Ä¶ --include-symbols --include-source ‚Ä¶
          else
            dotnet pack ‚Ä¶
          fi
          
          PUBLIC_RELEASE_FLAG=""
          if [ "${{ inputs.build_configuration }}" = "Release" ]; then
            PUBLIC_RELEASE_FLAG="-p:PublicRelease=true"
          fi

          dotnet pack \
            -c ${{ inputs.build_configuration }} \
            --no-build --no-restore \
            --output ./artifacts \
            $PUBLIC_RELEASE_FLAG \
            $EXTRA_FLAGS \
            -p:PackageVersion=${{ inputs.semver2 }} \
            -p:PackageReleaseNotes="https://github.com/${{ github.repository }}/releases/tag/${{ inputs.tag_name }}"

      - name: üöÄ Publish to NuGet
        if: ${{ inputs.push_after_pack }}
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push "./artifacts/*.nupkg" \
            --api-key "$NUGET_API_KEY" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
            
       # üßπ Prune older versions on nuget.org
      - name: üßπ Prune old package versions
        if: |
          inputs.push_after_pack == 'true' &&
          inputs.prune_after_push == 'true'
        shell: bash
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          KEEP=${{ inputs.prune_keep }}

          echo "Will keep the newest $KEEP version(s) for each pushed package."

          for nupkg in ./artifacts/*.nupkg; do
            pkgfile=$(basename "$nupkg")
            id="${pkgfile%%.*}"         # crude but works: Sample.Api.1.2.3.nupkg ‚Üí Sample

            echo "üîç Processing $id ‚Ä¶"

            # Query nuget flat-container for the full version list
            all=$(curl -sL "https://api.nuget.org/v3-flatcontainer/${id,,}/index.json" \
                  | jq -r '.versions[]')

            count=$(echo "$all" | wc -l)
            if [[ $count -le $KEEP ]]; then
              echo "  Nothing to prune ($count ‚â§ $KEEP)."
              continue
            fi

            # newest-to-oldest using sort --version-sort
            to_delete=$(echo "$all" | sort -Vr | tail -n +"$((KEEP+1))")

            while read -r ver; do
              echo "  üóëÔ∏è  Deleting $id $ver"
              dotnet nuget delete "$id" "$ver" \
                --source https://api.nuget.org/v3/index.json \
                --non-interactive \
                --api-key "$NUGET_API_KEY"
            done <<< "$to_delete"
          done

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name:  ${{ inputs.tag_name }}
          body_path: release-notes.md
          prerelease: ${{ contains(inputs.semver2, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
