name: NBGV Pack & Publish Package

on:
  workflow_call:
    inputs:
      checkout_ref:
        description: "Branch/ref to check out and pack"
        type: string
        required: true
      build_configuration:
        description: "Build configuration (e.g. Release, Develop)"
        type: string
        required: true
      push_after_pack:
        description: "Whether to push the resulting .nupkg"
        type: boolean
        required: true
      force_dev_prerelease:
        description: "Whether to include dev prerelease symbols"
        type: boolean
        required: true
      tag_name:
        description: "Exact Git tag produced by Nerdbank"
        type: string
        required: true
      semver2:
        description: "SemVer2 version string"
        type: string
        required: true
      prune_after_push:             
        description: "Delete old package versions after a successful push"
        type: boolean
        default: true
        required: false
      prune_keep:                   
        description: "Versions to retain per package"
        type: number
        default: 5
        required: false
        
    secrets:
      NUGET_API_KEY:
        description: "API key for pushing to NuGet.org"
        required: true
      GH_TOKEN:
        description: "GitHub token (falls back to github.token)"
        required: false
jobs:
  pack:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout_ref }}
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: ‚¨áÔ∏è Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release_notes

      - name: üîÑ Restore
        run: dotnet restore

      - name: üèóÔ∏è Build
        run: dotnet build -c ${{ inputs.build_configuration }} --no-restore

      - name: üì¶ Pack all packable projects
        shell: bash
        run: |
          set -euo pipefail

          echo "Finding all packable projects..."
          found_any=0
          failed=0
          while IFS= read -r csproj; do
            if grep -q '<IsPackable>true</IsPackable>' "$csproj"; then
              found_any=1
              echo ""
              echo "Packing: $csproj"
              if dotnet pack "$csproj" \
                -c "${{ inputs.build_configuration }}" \
                --no-build --no-restore \
                --output ./artifacts \
                -p:PackageVersion="${{ inputs.semver2 }}" \
                -p:PackageReleaseNotes="https://github.com/${{ github.repository }}/releases/tag/${{ inputs.tag_name }}"; then
                echo "‚úÖ Packed $csproj"
              else
                echo "‚ùå Failed to pack $csproj"
                failed=1
              fi
            else
              echo "Skipping: $csproj (IsPackable is not true)"
            fi
          done < <(find . -name '*.csproj')

          if [[ "$found_any" -eq 0 ]]; then
            echo "No packable projects found! (No csproj with <IsPackable>true</IsPackable>)"
            exit 1
          fi

          if [[ "$failed" -eq 1 ]]; then
            echo "One or more projects failed to pack."
            exit 1
          fi

          echo ""
          echo "All packable projects successfully packed to ./artifacts"
          echo "Packed NuGet packages:"
          ls -lh ./artifacts/*.nupkg

      - name: üöÄ Publish to NuGet
        if: ${{ inputs.push_after_pack }}
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push "./artifacts/*.nupkg" \
            --api-key "$NUGET_API_KEY" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
            
      - name: Install Nerdbank.GitVersioning tool
        run: dotnet tool install -g nbgv
        
    # üëá Get the version from Nerdbank.GitVersioning
      - name: Get Nerdbank Version
        id: nbgv
        run: |
          version=$(dotnet nbgv get-version --variable SemVer2)
          echo "semver=$version" >> $GITHUB_OUTPUT

      # üëá Create the GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.nbgv.outputs.semver }}
          name: Release ${{ steps.nbgv.outputs.semver }}
          draft: false
          prerelease: ${{ contains(steps.nbgv.outputs.semver, '-') }}
          files: ./artifacts/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üßπ Prune old package versions
        if: ${{ inputs.push_after_pack && inputs.prune_after_push }}
        shell: bash
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          KEEP=${{ inputs.prune_keep }}
  
          echo "Will keep the newest $KEEP version(s) for each pushed package."
  
          for nupkg in ./artifacts/*.nupkg; do
            pkgfile=$(basename "$nupkg")
            # Robust NuGet ID extraction (handles multi-dot names and prereleases)
            id=$(echo "$pkgfile" | sed -E 's|(.*)-[0-9]+\.[0-9]+(\.[0-9]+)*(-[A-Za-z0-9\.\-]+)?\.nupkg|\1|')
            echo "üîç Processing $id ‚Ä¶"
  
            # Fetch package versions from NuGet, with error handling
            resp=$(curl -sL "https://api.nuget.org/v3-flatcontainer/${id,,}/index.json")
            if ! echo "$resp" | jq . >/dev/null 2>&1; then
              echo "  ‚ö†Ô∏è  Could not fetch versions for $id (maybe not published yet). Skipping."
              continue
            fi
  
            all=$(echo "$resp" | jq -r '.versions[]')
            count=$(echo "$all" | wc -l)
            if [[ $count -le $KEEP ]]; then
              echo "  Nothing to prune ($count ‚â§ $KEEP)."
              continue
            fi
  
            to_delete=$(echo "$all" | sort -Vr | tail -n +"$((KEEP+1))")
  
            while read -r ver; do
              if [[ -z "$ver" ]]; then continue; fi
              echo "  üóëÔ∏è  Deleting $id $ver"
              dotnet nuget delete "$id" "$ver" \
                --source https://api.nuget.org/v3/index.json \
                --non-interactive \
                --api-key "$NUGET_API_KEY"
            done <<< "$to_delete"
          done
