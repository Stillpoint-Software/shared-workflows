name: Create Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Branch to release from (e.g., main, develop, hotfix/xyz, v1.2)'
        type: string
        required: true
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Verify target branch via API
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -euo pipefail
          BR="${{ inputs.target_branch }}"
          URL="https://api.github.com/repos/${{ github.repository }}/branches/${BR}"
          code=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" "$URL")
          [[ "$code" == "200" ]] || { echo "❌ Branch not found on origin: $BR"; exit 1; }

      - name: Checkout target branch (full history for NBGV)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.target_branch }}

      - name: Debug version.json files
        run: |
          echo "PWD=$(pwd)"
          echo "Listing all version.json files tracked by git:"
          git ls-files | grep -E '(^|/)(version\.json)$' || true
          echo "Root version.json (if present):"
          [ -f version.json ] && sed -n '1,200p' version.json || echo "no root version.json"
          echo "Search for empty version fields:"
          git grep -n '"version"\s*:\s*""' || true
          
      - name: Nerdbank.GitVersioning (install + outputs)
        id: nbgv
        uses: dotnet/nbgv@v0.4.2
        with:
          toolVersion: 3.8.38-alpha

      - name: Guard - block prerelease from main; block stable from develop/hotfix/*
        run: |
          PRE="${{ steps.nbgv.outputs.PrereleaseVersion }}"
          BR="${{ inputs.target_branch }}"
          if [[ -n "$PRE" && "$BR" == "main" ]]; then
            echo "❌ Computed PRERELEASE on 'main'. Cut prereleases from develop or hotfix/*."
            exit 1
          fi
          if [[ -z "$PRE" && ( "$BR" == "develop" || "$BR" =~ ^hotfix/ ) ]]; then
            echo "❌ Computed STABLE on '$BR'. Stable releases should come from main or vX.Y."
            exit 1
          fi

      - name: Tag current commit with NBGV
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          nbgv tag || echo "Tag may already exist locally."
          git push origin "v${{ steps.nbgv.outputs.NuGetPackageVersion }}" || echo "Tag already exists on remote."

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          TAG="v${{ steps.nbgv.outputs.NuGetPackageVersion }}"
          PRE="${{ steps.nbgv.outputs.PrereleaseVersion }}"
          BR="${{ inputs.target_branch }}"
          FLAGS=()
          [[ -n "$PRE" ]] || FLAGS+=(--latest)  # latest only for stable
          # Only mark latest for stable from main or servicing branches vX.Y
          if [[ -n "$PRE" || ( "$BR" != "main" && ! "$BR" =~ ^v[0-9]+\.[0-9]+$ ) ]]; then
            FLAGS=("${FLAGS[@]/--latest}")  # strip latest if conditions not met
          fi
          echo "Creating release ${TAG} from '${BR}'"
          gh release create "${TAG}" --title "${TAG}" --generate-notes "${FLAGS[@]}"
