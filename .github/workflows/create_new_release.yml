name: Create Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Branch to release from (e.g., main, develop, hotfix/xyz, v1.2)'
        type: string
        required: true
      is_prerelease:
        type: boolean
        required: true
        default: false
      is_draft:
        type: boolean
        required: true
        default: false
    secrets:
      GH_TOKEN:
        required: true

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      # Fail if trying to cut a prerelease from main
      - name: Guard no prerelease from main
        if: ${{ inputs.is_prerelease && inputs.target_branch == 'main' }}
        run: |
          echo "❌ Prereleases must not be cut from main. Use develop or hotfix/*."
          exit 1

      # Fail if trying to cut a stable from develop or hotfix/*
      - name: Guard stable not from develop/hotfix
        if: ${{ !inputs.is_prerelease && (startsWith(inputs.target_branch, 'develop') || startsWith(inputs.target_branch, 'hotfix/')) }}
        run: |
          echo "❌ Stable releases should come from main or vX.Y servicing branches, not develop/hotfix/*."
          exit 1

      - name: Verify target branch exists on origin
        run: |
          if ! git ls-remote --exit-code --heads origin "${{ inputs.target_branch }}" >/dev/null; then
            echo "❌ Branch not found on origin: ${{ inputs.target_branch }}"
            exit 1
          fi

      - name: Checkout target branch (full history for NBGV)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.target_branch }}

      - name: Nerdbank.GitVersioning (install + outputs)
        id: nbgv
        uses: dotnet/nbgv@v0.4.2
        with:
          toolVersion: 3.8.38-alpha   # keep behavior pinned
          setAllVars: false

      - name: Sanity-check - requested prerelease vs computed version
        run: |
          PRE="${{ steps.nbgv.outputs.PrereleaseVersion }}"
          if [[ "${{ inputs.is_prerelease }}" == "true" && -z "$PRE" ]]; then
            echo "❌ Requested prerelease, but NBGV computed a STABLE version."
            exit 1
          fi
          if [[ "${{ inputs.is_prerelease }}" == "false" && -n "$PRE" ]]; then
            echo "❌ Requested STABLE, but NBGV computed a PRERELEASE ($PRE)."
            exit 1
          fi

      - name: Tag current commit with NBGV
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          # Creates annotated tag v{NuGetPackageVersion} at HEAD
          nbgv tag || echo "Tag may already exist locally."
          git push origin "v${{ steps.nbgv.outputs.NuGetPackageVersion }}" || echo "Tag already exists on remote."

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          FLAGS=()
          [[ "${{ inputs.is_draft }}" == "true"      ]] && FLAGS+=(--draft)
          [[ "${{ inputs.is_prerelease }}" == "true" ]] && FLAGS+=(--prerelease)

          # Mark latest for stable releases from main or servicing branches vX.Y
          if [[ "${{ inputs.target_branch }}" == "main" || "${{ inputs.target_branch }}" =~ ^v[0-9]+\.[0-9]+$ ]]; then
            if [[ "${{ inputs.is_prerelease }}" != "true" ]]; then
              FLAGS+=(--latest)
            fi
          fi

          TAG="v${{ steps.nbgv.outputs.NuGetPackageVersion }}"
          echo "Creating release ${TAG} from '${{ inputs.target_branch }}'"
          gh release create "${TAG}" --title "${TAG}" --generate-notes "${FLAGS[@]}"
